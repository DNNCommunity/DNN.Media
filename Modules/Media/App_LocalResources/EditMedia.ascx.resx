<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="plURL.Text" xml:space="preserve">
    <value>File Location</value>
  </data>
  <data name="plURL.Help" xml:space="preserve">
    <value>Select a media file from your file system, or upload one to select.</value>
  </data>
  <data name="plAlt.Text" xml:space="preserve">
    <value>Alternate Text</value>
  </data>
  <data name="plAlt.Help" xml:space="preserve">
    <value>Enter text that will be displayed by browsers that are not able to display the Media</value>
  </data>
  <data name="valAltText.ErrorMessage" xml:space="preserve">
    <value>Alternate text is required.</value>
  </data>
  <data name="valWidth.ErrorMessage" xml:space="preserve">
    <value>Width must be a valid integer. Only numbers are allowed.</value>
  </data>
  <data name="valHeight.ErrorMessage" xml:space="preserve">
    <value>Height must be a valid integer. Only numbers are allowed.</value>
  </data>
  <data name="plWidth.Text" xml:space="preserve">
    <value>Width</value>
  </data>
  <data name="plWidth.Help" xml:space="preserve">
    <value>Enter a width (in pixels) for the Media. Images will automatically inherit their appropriate value. Required for videos to render properly.</value>
  </data>
  <data name="plHeight.Text" xml:space="preserve">
    <value>Height</value>
  </data>
  <data name="plHeight.Help" xml:space="preserve">
    <value>Enter a height (in pixels) for the Media. Images will automatically inherit their appropriate value. Required for videos to render properly.</value>
  </data>
  <data name="plNavigateUrl.Text" xml:space="preserve">
    <value>Link Your Image To</value>
  </data>
  <data name="plNavigateUrl.Help" xml:space="preserve">
    <value>Specify a URL to link to, if desired (Note: The link setting is only applicable to image types; other media types are not supported)</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;About The Media Module&lt;/h1&gt;

&lt;p&gt;The Media Module renders media from a relative or absolute URL.  The media file does not need to reside on the host system. Height and width attributes for the media can be entered, which provides adjustment of the media dimensions.  Alternative text is mandatory.&lt;/p&gt;

&lt;h2&gt;Edit Media Options&lt;/h2&gt;

&lt;ol&gt;&lt;li&gt;Add an &lt;b&gt;Media&lt;/b&gt; module, or go to an existing &lt;b&gt;Media&lt;/b&gt; module.&lt;/li&gt;
&lt;li&gt;Click &lt;b&gt;Edit Media Options&lt;/b&gt;.
&lt;li&gt;At &lt;b&gt;Media&lt;/b&gt;, select the &lt;b&gt;media&lt;/b&gt; or click &lt;b&gt;Upload New File&lt;/b&gt;.
&lt;li&gt;At &lt;b&gt;Alternate Text&lt;/b&gt;, enter the text to be displayed on media mouse over.
&lt;li&gt;Click &lt;b&gt;Update&lt;/b&gt;.&lt;/ol&gt;</value>
  </data>
  <data name="ControlTitle_edit.Text" xml:space="preserve">
    <value>Edit Media Module Options</value>
  </data>
  <data name="UseModuleSettings.Text" xml:space="preserve">
    <value>Use Module Settings Value</value>
  </data>
  <data name="None.Text" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="Left.Text" xml:space="preserve">
    <value>Left</value>
  </data>
  <data name="Center.Text" xml:space="preserve">
    <value>Center</value>
  </data>
  <data name="Right.Text" xml:space="preserve">
    <value>Right</value>
  </data>
  <data name="plAlignment.Text" xml:space="preserve">
    <value>Media Alignment</value>
  </data>
  <data name="plAlignment.Help" xml:space="preserve">
    <value>This setting will override the alignment that's defined in the container that's being used.</value>
  </data>
  <data name="lblAutoStart.Help" xml:space="preserve">
    <value>Automatically start videos when the page loads.</value>
  </data>
  <data name="lblAutoStart.Text" xml:space="preserve">
    <value>Auto-Start Videos</value>
  </data>
  <data name="lblImagesOnly.Text" xml:space="preserve">
    <value>Only Images Use the Following Settings</value>
  </data>
  <data name="lblLoop.Help" xml:space="preserve">
    <value>Loop videos when they complete.</value>
  </data>
  <data name="lblLoop.Text" xml:space="preserve">
    <value>Loop Videos</value>
  </data>
  <data name="lblVideosOnly.Text" xml:space="preserve">
    <value>Only Videos Use the Following Settings</value>
  </data>
  <data name="VideoDimsRequired.Text" xml:space="preserve">
    <value>Required for all videos and some embedded media content to render properly.</value>
  </data>
  <data name="lblSupportedFileTypes.Text" xml:space="preserve">
    <value>In order to use most of these file formats, you will need to enable them. Consult your website administrator for more information.</value>
  </data>
  <data name="BasicSettings.Text" xml:space="preserve">
    <value>Basic Settings</value>
  </data>
  <data name="HostFileTypes.Text" xml:space="preserve">
    <value>The following file types are currently supported by the website configuration</value>
  </data>
  <data name="lblVideoMessage.Text" xml:space="preserve">
    <value>&lt;p&gt;WARNING!  Videos are played by their respective client-side players, installed by your website visitors on their own computers.  Each video player and video player version will treat and ignore these settings differently.&lt;/p&gt;
&lt;p&gt;Flash videos must be auto-started and looped within the Flash object itself.&lt;/p&gt;</value>
  </data>
  <data name="lnkViewFileTypes.Text" xml:space="preserve">
    <value>click to view/hide</value>
  </data>
  <data name="SupportedImage.Text" xml:space="preserve">
    <value>Supported</value>
  </data>
  <data name="tblMediaFileTypes.Header.FileType" xml:space="preserve">
    <value>File Extension</value>
  </data>
  <data name="tblMediaFileTypes.Header.HostSupport" xml:space="preserve">
    <value>Site</value>
  </data>
  <data name="tblMediaFileTypes.Header.ModuleSupport" xml:space="preserve">
    <value>Module</value>
  </data>
  <data name="UnsupportedImage.Text" xml:space="preserve">
    <value>Not Supported</value>
  </data>
  <data name="lblEmbedSupport.Text" xml:space="preserve">
    <value>Copy embed codes from sites like YouTube, Flicker, and Vimeo. Then, paste it in the textbox above.</value>
  </data>
  <data name="lblFileUpload.Text" xml:space="preserve">
    <value>Specify Your Media</value>
  </data>
  <data name="lblOEmbedCheck.Text.EmptyString" xml:space="preserve">
    <value>There isn't a URL to validate.</value>
  </data>
  <data name="lblOEmbedCheck.Text.Supported" xml:space="preserve">
    <value>The URL entered is supported.</value>
  </data>
  <data name="lblOEmbedCheck.Text.Unsupported" xml:space="preserve">
    <value>The URL or URL format entered is not supported by this module.</value>
  </data>
  <data name="lblOEmbedDesc.Text" xml:space="preserve">
    <value>A technology called OEmbed allows you to copy the URL of certain web pages, and paste it here. This allows the module to automatically pull out the media from the page without you needing to know how to find the embed code.</value>
  </data>
  <data name="lblOEmbedSupport.Text" xml:space="preserve">
    <value>The following sites are supported with OEmbed: Clearspring Widgets, Flickr, Hulu, MyOpera, oohEmbed, Poll Everywhere, Qik, Revision3, Viddler, Vimeo, YouTube, and over 30 other popular sites.</value>
  </data>
  <data name="lblUploadWarning.Text" xml:space="preserve">
    <value>Large files might throw an error due to file size limitations on your website. If this happens, either upload the file using FTP, or consult your website administrator.</value>
  </data>
  <data name="lnkOEmbed.Text" xml:space="preserve">
    <value>&gt;&gt; Validate URL</value>
  </data>
  <data name="plEmbed.Help" xml:space="preserve">
    <value>Paste in the embed code copied from sites like Vimeo, Flickr, and YouTube.</value>
  </data>
  <data name="plEmbed.Text" xml:space="preserve">
    <value>Embed Code</value>
  </data>
  <data name="plMediaType.Help" xml:space="preserve">
    <value>Choose the kind of media you will be using right now.</value>
  </data>
  <data name="plMediaType.Text" xml:space="preserve">
    <value>Media Type</value>
  </data>
  <data name="plOEmbed.Help" xml:space="preserve">
    <value>Paste the URL of the webpage for a supportable OEmbed website. A list of the supported websites are below the textbox.</value>
  </data>
  <data name="plOEmbed.Text" xml:space="preserve">
    <value>Embedable URL</value>
  </data>
  <data name="radMediaType.Items.0" xml:space="preserve">
    <value>Standard File System</value>
  </data>
  <data name="radMediaType.Items.1" xml:space="preserve">
    <value>Embed Code</value>
  </data>
  <data name="radMediaType.Items.2" xml:space="preserve">
    <value>Website URL</value>
  </data>
  <data name="valMediaType.ErrorMessage" xml:space="preserve">
    <value>You must select and specify a media type.</value>
  </data>
  <data name="lblLastUpdated.Text" xml:space="preserve">
    <value>Last Updated by {0} On {1}</value>
  </data>
  <data name="plMessage.Help" xml:space="preserve">
    <value>This value will be displayed below the media by default, but can be customized in numerous ways through your site design. It will also be indexed by the website search engine.</value>
  </data>
  <data name="plMessage.Text" xml:space="preserve">
    <value>Description of the Media</value>
  </data>
  <data name="Unknown.Text" xml:space="preserve">
    <value>Unknown</value>
  </data>
  <data name="lblJournalIntegration.Text" xml:space="preserve">
    <value>Social Integration</value>
  </data>
  <data name="lblOverrideJournalSetting.Help" xml:space="preserve">
    <value>If checked, this instance of the Media Module will ignore the site wide setting.</value>
  </data>
  <data name="lblOverrideJournalSetting.Text" xml:space="preserve">
    <value>Override Site Setting</value>
  </data>
  <data name="lblPostToJournal.Help" xml:space="preserve">
    <value>If checked, this module will post a status update on the journal that media has been saved.</value>
  </data>
  <data name="lblPostToJournal.Text" xml:space="preserve">
    <value>Post to Journal</value>
  </data>
  <data name="lblPostToJournalSiteWide.Help" xml:space="preserve">
    <value>If checked, this setting will be used for every instance of this module on the site.</value>
  </data>
  <data name="lblPostToJournalSiteWide.Text" xml:space="preserve">
    <value>For All Media Modules?</value>
  </data>
  <data name="Journal.Status.Media.Updated" xml:space="preserve">
    <value>just updated &lt;a href="{1}"&gt;{0}&lt;/a&gt; on &lt;a href="{1}"&gt;{2}&lt;/a&gt;!</value>
  </data>
  <data name="lblNotifyOnUpdate.Help" xml:space="preserve">
    <value>If checked, all admins will be notified when this module is updated. This is a site-wide setting for all instances of the Media Module.</value>
  </data>
  <data name="lblNotifyOnUpdate.Text" xml:space="preserve">
    <value>Notify Administrators on Update?</value>
  </data>
  <data name="Informed.Text" xml:space="preserve">
    <value>Thanks for telling me.</value>
  </data>
  <data name="Notification.Body.ModuleUpdated" xml:space="preserve">
    <value>The &lt;strong&gt;{0}&lt;/strong&gt; media module on &lt;a href="{1}"&gt;{2}&lt;/a&gt; has been updated.</value>
  </data>
  <data name="Notification.Subject.ModuleUpdated" xml:space="preserve">
    <value>Media Module Updated</value>
  </data>
</root>