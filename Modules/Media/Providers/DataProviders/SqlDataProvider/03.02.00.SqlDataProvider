/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

/** Create Table and process Media Information**/

if not exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Media]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)


       BEGIN
              CREATE TABLE {databaseOwner}[{objectQualifier}Media]
              (
                     [ModuleID] [int] NOT NULL,
                     [Src] nvarchar(250) NOT NULL,
                     [alt] nvarchar(100) NULL,
                     [width] [int] NULL,
                     [height] [int] NULL,
		     [NavigateUrl] NVARCHAR(250)
              )

              ALTER TABLE {databaseOwner}[{objectQualifier}Media] ADD CONSTRAINT [PK_{objectQualifier}Media] PRIMARY KEY CLUSTERED  ([ModuleID])

              ALTER TABLE {databaseOwner}[{objectQualifier}Media] WITH NOCHECK ADD CONSTRAINT [FK_{objectQualifier}Media_{objectQualifier}Modules] FOREIGN KEY ([ModuleID]) REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID]) ON DELETE CASCADE 

/** Move existing data from the Module Settings table to the new Table **/

              DECLARE @Setting varchar(50)
              DECLARE @Value varchar(2000)
              DECLARE @ModuleID int
              DECLARE @tempID int

              DECLARE cur CURSOR FOR

              SELECT
                     {databaseOwner}{objectQualifier}ModuleSettings.ModuleID, 
                     {databaseOwner}{objectQualifier}ModuleSettings.SettingName, 
                     {databaseOwner}{objectQualifier}ModuleSettings.SettingValue

              FROM       
                     {databaseOwner}{objectQualifier}ModuleSettings 
                     INNER JOIN {databaseOwner}{objectQualifier}Modules 
                           ON {databaseOwner}{objectQualifier}ModuleSettings.ModuleID = {databaseOwner}{objectQualifier}Modules.ModuleID 
                     INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions 
                           ON {databaseOwner}{objectQualifier}Modules.ModuleDefID = {databaseOwner}{objectQualifier}ModuleDefinitions.ModuleDefID 
                     INNER JOIN {databaseOwner}{objectQualifier}DesktopModules 
                           ON {databaseOwner}{objectQualifier}ModuleDefinitions.DesktopModuleID = {databaseOwner}{objectQualifier}DesktopModules.DesktopModuleID
              WHERE     
                     {databaseOwner}{objectQualifier}DesktopModules.ModuleName = N'DNN_Image'
              ORDER BY
                     {databaseOwner}{objectQualifier}ModuleSettings.ModuleID

               
              SET @TempID = 0

              OPEN cur
              FETCH NEXT FROM cur INTO @ModuleID, @Setting, @Value

              WHILE @@fetch_Status = 0

              BEGIN

                     IF @tempID <> @ModuleID
                     BEGIN
                           INSERT into {databaseOwner}{objectQualifier}Media (ModuleID,src)
                           VALUES (@ModuleID,'')
                     
                           SET @tempID = @ModuleID
                     END

                     IF @Setting = 'src'
                           UPDATE Media SET src = @Value WHERE ModuleID = @ModuleID
                     IF @Setting = 'alt'
                           UPDATE Media SET alt = CASE WHEN @Value ='' THEN NULL ELSE @value END WHERE ModuleID = @ModuleID
                     IF @Setting = 'width'
                           UPDATE Media SET Width = CASE WHEN @Value ='' THEN NULL ELSE @value END WHERE ModuleID = @ModuleID
                     IF @Setting = 'height'
                           UPDATE Media SET height = CASE WHEN @Value ='' THEN NULL ELSE @value END WHERE ModuleID = @ModuleID
                     
                     FETCH NEXT FROM cur INTO @ModuleID, @Setting, @Value

              END

              CLOSE cur
              DEALLOCATE cur

/** delete Records from Settings **/

              DELETE {databaseOwner}{objectQualifier}ModuleSettings 
              FROM       
                     {databaseOwner}{objectQualifier}ModuleSettings 
                     INNER JOIN {databaseOwner}{objectQualifier}Modules 
                           ON {databaseOwner}{objectQualifier}ModuleSettings.ModuleID = {databaseOwner}{objectQualifier}Modules.ModuleID 
                     INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions 
                           ON {databaseOwner}{objectQualifier}Modules.ModuleDefID = {databaseOwner}{objectQualifier}ModuleDefinitions.ModuleDefID 
                     INNER JOIN {databaseOwner}{objectQualifier}DesktopModules 
                           ON {databaseOwner}{objectQualifier}ModuleDefinitions.DesktopModuleID = {databaseOwner}{objectQualifier}DesktopModules.DesktopModuleID
              WHERE     
                     {databaseOwner}{objectQualifier}DesktopModules.ModuleName = N'DNN_Image'

       END    
       
GO


/** Drop Existing Stored Procedures **/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}AddMedia]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
       drop procedure {databaseOwner}{objectQualifier}AddMedia
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}GetMedia]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
       drop procedure {databaseOwner}{objectQualifier}GetMedia
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}UpdateMedia]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
       drop procedure {databaseOwner}{objectQualifier}UpdateMedia
GO


/** Create Stored Procedures **/

CREATE PROCEDURE {databaseOwner}{objectQualifier}AddMedia
	@ModuleID		INT,
	@Src			NVARCHAR(250),
	@Alt			NVARCHAR(100),
	@Width			INT,
	@Height			INT,
	@NavigateUrl	NVARCHAR(250)
AS

INSERT INTO {objectQualifier}Media (ModuleID, Src, Alt, Width, Height, NavigateUrl) 
VALUES (@ModuleId, @Src, @Alt, @Width, @Height, @NavigateUrl)
GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}GetMedia
	@ModuleId	INT
AS

SELECT	m.ModuleID,
	[Src] = CASE WHEN srcf.FileName IS NULL THEN m.Src ELSE srcf.Folder + srcf.FileName END,
    m.Alt,
    m.Width,
    m.Height,
	[NavigateUrl] = CASE WHEN navf.FileName IS NULL THEN m.NavigateUrl ELSE navf.Folder + navf.FileName END,
    {objectQualifier}UrlTracking.NewWindow,
    {objectQualifier}UrlTracking.TrackClicks
FROM	{objectQualifier}Media AS m
	LEFT OUTER JOIN {objectQualifier}Files AS srcf ON m.Src = 'fileid=' + CONVERT(VARCHAR, srcf.FileID)
	LEFT OUTER JOIN {objectQualifier}Files AS navf ON m.NavigateUrl = 'fileid=' + CONVERT(VARCHAR, navf.FileID)
	LEFT OUTER JOIN {objectQualifier}UrlTracking ON m.NavigateUrl = {objectQualifier}UrlTracking.Url and {objectQualifier}UrlTracking.ModuleId = @ModuleID 
WHERE	m.ModuleId = @ModuleId
GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateMedia
	@ModuleID		INT,
	@Src			NVARCHAR(250),
	@Alt			NVARCHAR(100),
	@Width			INT,
	@Height			INT,
	@NavigateUrl	NVARCHAR(250)
AS

UPDATE	{objectQualifier}Media
SET		Src = @Src,
		Alt = @Alt,
		Width = @Width,
		Height = @Height,
		NavigateUrl = @NavigateUrl
WHERE	ModuleID = @ModuleID
GO


/*****        Used only once during Upgrade             *****/
CREATE PROCEDURE {databaseOwner}{objectQualifier}UpgradeMedia
	@OldModuleDefID		INT,
	@NewModuleDefID		INT
AS

UPDATE	{objectQualifier}Modules
SET		ModuleDefID = @NewModuleDefID
WHERE	ModuleDefID = @OldModuleDefID
GO


/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/